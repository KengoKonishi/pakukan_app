
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$BEGIN
  IF new.raw_user_meta_data ->> 'role' = 'admin' THEN
    INSERT INTO public.admins (user_id, owner_group_id, name, email)
    VALUES (new.id, (new.raw_user_meta_data ->> 'owner_group_id')::int,new.raw_user_meta_data ->> 'name', new.email);
  ELSIF new.raw_user_meta_data ->> 'role' = 'staff' THEN
    INSERT INTO public.cleaners (user_id, owner_group_id, name, email, tel, line_access_token, is_deleted)
    VALUES (new.id, (new.raw_user_meta_data ->> 'owner_group_id')::int,new.raw_user_meta_data ->> 'name', new.email, new.raw_user_meta_data ->> 'tel', new.raw_user_meta_data ->> 'line_access_token',0);
  END IF;
  RETURN new;
END;$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."admins" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "owner_group_id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "email" character varying NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "updated_at" timestamp without time zone DEFAULT "now"()
);

ALTER TABLE "public"."admins" OWNER TO "postgres";

ALTER TABLE "public"."admins" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."admins_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."cleaners" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "owner_group_id" bigint,
    "name" character varying,
    "email" character varying,
    "tel" character varying,
    "line_access_token" character varying,
    "created_at" timestamp without time zone,
    "updated_at" timestamp without time zone,
    "is_deleted" smallint
);

ALTER TABLE "public"."cleaners" OWNER TO "postgres";

ALTER TABLE "public"."cleaners" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."cleaners_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."owner_groups" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "updated_at" timestamp without time zone DEFAULT "now"()
);

ALTER TABLE "public"."owner_groups" OWNER TO "postgres";

ALTER TABLE "public"."owner_groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."owner_groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."admins"
    ADD CONSTRAINT "admins_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."cleaners"
    ADD CONSTRAINT "cleaners_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."owner_groups"
    ADD CONSTRAINT "owner_groups_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."admins"
    ADD CONSTRAINT "public_admins_owner_group_id_fkey" FOREIGN KEY ("owner_group_id") REFERENCES "public"."owner_groups"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."admins"
    ADD CONSTRAINT "public_admins_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."cleaners"
    ADD CONSTRAINT "public_cleaners_owner_group_id_fkey" FOREIGN KEY ("owner_group_id") REFERENCES "public"."owner_groups"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."cleaners"
    ADD CONSTRAINT "public_cleaners_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE "public"."admins" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."cleaners" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."owner_groups" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."admins" TO "anon";
GRANT ALL ON TABLE "public"."admins" TO "authenticated";
GRANT ALL ON TABLE "public"."admins" TO "service_role";

GRANT ALL ON SEQUENCE "public"."admins_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."admins_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."admins_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."cleaners" TO "anon";
GRANT ALL ON TABLE "public"."cleaners" TO "authenticated";
GRANT ALL ON TABLE "public"."cleaners" TO "service_role";

GRANT ALL ON SEQUENCE "public"."cleaners_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."cleaners_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."cleaners_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."owner_groups" TO "anon";
GRANT ALL ON TABLE "public"."owner_groups" TO "authenticated";
GRANT ALL ON TABLE "public"."owner_groups" TO "service_role";

GRANT ALL ON SEQUENCE "public"."owner_groups_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."owner_groups_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."owner_groups_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
